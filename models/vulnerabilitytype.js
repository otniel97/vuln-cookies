'use strict';
const {
    Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
    class VulnerabilityType extends Model {
        /**
         * Helper method for defining associations.
         * This method is not a part of Sequelize lifecycle.
         * The `models/index` file will call this method automatically.
         */
        static associate(models) {
            // define association here
            VulnerabilityType.belongsToMany(models.Program, {
                through: 'ProgramVulnerabilityType',
                foreignKey: 'vulnerabilityTypeId',
                otherKey: 'programId'
            });
            VulnerabilityType.hasMany(models.VulnerabilityReport, { foreignKey: 'vulnerabilityTypeId' });
        }
    };
    VulnerabilityType.prototype.toJSON = function() {
        var values = Object.assign({}, this.get());
        delete values.createdAt;
        delete values.updatedAt;
        return values;
    }
    VulnerabilityType.init({
        name: {
            type: DataTypes.STRING,
            allowNull: false,
            unque: true,
            validate: {
                notEmpty: {
                    msg: 'No puede tener el nombre vacío.'
                }
            },
            unique: {
                msg: 'Ya existe un tipo de vulnerabilidad con el mismo nombre.'
            }
        },
        description: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener la descripción vacía.'
                }
            }
        },
        score: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'El puntaje no puede estar vacío.'
                },
                isInt: {
                    args: true,
                    msg: 'Debe introducir valores numéricos'
                },
                min: {
                    args: 1,
                    msg: 'El valor mínimo es 1'
                },
            }
        },
        color: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener el color vacío.'
                }
            }
        },
        status: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'El estatus no puede estar vacío.'
                }
            }
        },
        isDefault: {
            type: DataTypes.INTEGER,
            allowNull: false
        },
    }, {
        sequelize,
        modelName: 'VulnerabilityType',
    });
    return VulnerabilityType;
};