'use strict';
const {
    Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
    class VulnerabilityReport extends Model {
        /**
         * Helper method for defining associations.
         * This method is not a part of Sequelize lifecycle.
         * The `models/index` file will call this method automatically.
         */
        static associate(models) {
            // define association here
            VulnerabilityReport.belongsTo(models.Hacker, { foreignKey: 'hackerId' });
            VulnerabilityReport.belongsTo(models.Program, { foreignKey: 'programId' });
            VulnerabilityReport.belongsTo(models.VulnerabilityType, { foreignKey: 'vulnerabilityTypeId' });
            VulnerabilityReport.belongsTo(models.Vulnerability, { foreignKey: 'vulnerabilityId' });
            VulnerabilityReport.belongsTo(models.Asset, { foreignKey: 'assetId' });
            VulnerabilityReport.hasMany(models.Step, { foreignKey: 'reportId' });
            VulnerabilityReport.hasMany(models.Comment, { foreignKey: 'reportId' });
            VulnerabilityReport.hasMany(models.MoneyFlow, { foreignKey: 'reportId' });
        }
    };
    VulnerabilityReport.prototype.toJSON = function() {
        var values = Object.assign({}, this.get());
        delete values.updatedAt;
        return values;
    }
    VulnerabilityReport.init({
        title: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener el título vacío.'
                }
            }
        },
        description: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener la descripción vacía.'
                }
            }
        },
        impact: {
            type: DataTypes.TEXT,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener el impacto vacío.'
                }
            }
        },
        file: {
            type: DataTypes.STRING,
            allowNull: true,
        },
        price: {
            type: DataTypes.FLOAT,
            allowNull: true,
            isFloat: {
                args: true,
                msg: 'Debe introducir valores numéricos'
            },
        },
        status: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'El estatus no puede estar vacío.'
                }
            }
        },
        approved: {
            type: DataTypes.INTEGER,
            allowNull: true
        },
        hackerId: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener id hacker vacío.'
                }
            }
        },
        programId: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener id programa vacío.'
                }
            }
        },
        vulnerabilityTypeId: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener id tipo de vulnerabilidad vacío.'
                }
            }
        },
        vulnerabilityId: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener id de vulnerabilidad vacío.'
                }
            }
        },
        assetId: {
            type: DataTypes.INTEGER,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: 'No puede tener id de activo vacío.'
                }
            }
        },
        paid: {
            type: DataTypes.INTEGER,
            allowNull: true,
            defaultValue: 0
        },
    }, {
        sequelize,
        modelName: 'VulnerabilityReport',
    });
    return VulnerabilityReport;
};