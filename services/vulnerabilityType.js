// ====================================================
//      VULNERABILITY TYPE SERVICE
// ====================================================

const VulnerabilityType = require('../models').VulnerabilityType;
const { isHexColor } = require('../utils/validations');
const { successMsg, errorMsg, exceptionMsg } = require('../utils/responses');
const { saveLog } = require('./log');

//==============================================
//Mostrar todos los tipos de vulnerabilidad
//==============================================
async function getVulnerabilityTypes(req, res) {
    try {
        const vulnerabilityTypes = await VulnerabilityType.findAll();
        successMsg(res, 200, 'correcto', vulnerabilityTypes)
    } catch (error) {
        errorMsg(res, 500, 'Ha ocurrido un error', error);
    }
}

//========================================================
//Mostrar todos los tipos de vulnerabilidad por estatus
//========================================================
async function getVulnerabilityTypesByStatus(req, res) {
    try {
        const status = req.params.status;
        const vulnerabilityTypes = await VulnerabilityType.findAll({ where: { status } });
        successMsg(res, 200, 'correcto', vulnerabilityTypes);
    } catch (error) {
        errorMsg(res, 500, 'Ha ocurrido un error', error);
    }
}

//======================================
//Mostrar tipo de vulnerabilidad por id
//======================================
async function getVulnerabilityTypeById(req, res) {
    try {
        const id = req.params.id;
        const vulnerabilityType = await VulnerabilityType.findOne({ where: { id } })
        vulnerabilityType ?
            successMsg(res, 200, 'correcto', vulnerabilityType) :
            exceptionMsg(res, id, 'Tipo de Vulnerabilidad');
    } catch (error) {
        errorMsg(res, 500, 'Ha ocurrido un error', error)
    }
}

//==============================
//Crear tipo de vulnerabilidad
//==============================
async function saveVulnerabilityType(req, res) {
    try {
        let body = req.body;

        const checkColor = isHexColor(body.color)
        if (!checkColor)
            return res.status(400).json({
                ok: false,
                err: {
                    message: "Debe seleccionar un color válido en formato hexadecimal"
                }
            });

        let newVulnerabilityType = {
            name: body.name,
            description: body.description,
            score: Number(body.score),
            color: body.color,
            status: body.status || 1,
            isDefault: 0
        }

        const vulnerabilityType = await VulnerabilityType.create(newVulnerabilityType);
        saveLog(req, "create", "VulnerabilityType", vulnerabilityType.id, req.user.id);

        const msg = vulnerabilityType.name ?
            `${vulnerabilityType.name} creado con exito` :
            'creación exitosa!'

        successMsg(res, 200, msg, vulnerabilityType);
    } catch (error) {
        errorMsg(res, 500, 'Lo sentimos!, hemos  cometido un error', error)
    }
}

//===================================
//Actualizar tipo de vulnerabilidad
//===================================
async function updateVulnerabilityTypeById(req, res) {
    try {
        const id = req.params.id;
        const vulnerabilityType = await VulnerabilityType.findOne({ where: { id } })

        if (!vulnerabilityType)
            return exceptionMsg(res, id, 'Tipo de Vulnerabilidad');

        if (req.body.color.length > 0) {
            const checkColor = isHexColor(req.body.color)
            if (!checkColor)
                return res.status(400).json({
                    ok: false,
                    err: {
                        message: "Debe seleccionar un color válido en formato hexadecimal"
                    }
                });
        }
        vulnerabilityType.set({...req.body })
        await vulnerabilityType.save();
        saveLog(req, "update", "VulnerabilityType", vulnerabilityType.id, req.user.id);

        const msg = vulnerabilityType.name ?
            `Se edito ${ vulnerabilityType.name } con exito` :
            'Actualización de datos exitosa'

        successMsg(res, 200, msg, vulnerabilityType);
    } catch (error) {
        errorMsg(res, 500, `lo sentimos hemos cometido un error!`, error);
    }
}

//==========================================
//Activar desactivar tipo de vulnerabilidad
//==========================================
async function updateVulnerabilityTypeStatusById(req, res) {
    try {
        const id = req.params.id;
        const vulnerabilityType = await VulnerabilityType.findOne({ where: { id } })

        if (!vulnerabilityType)
            exceptionMsg(res, id, 'Tipo de Vulnerabilidad');
        else {
            if (vulnerabilityType.status != 0)
                vulnerabilityType.set({ status: 0 })
            else
                vulnerabilityType.set({ status: 1 })
            await vulnerabilityType.save();
            saveLog(req, "update status", "VulnerabilityType", vulnerabilityType.id, req.user.id);

            const msg = vulnerabilityType.name ?
                `se actualizo el estatus de ${vulnerabilityType.name}` :
                'actualización exitosa'

            successMsg(res, 200, msg, vulnerabilityType)
        }
    } catch (error) {
        errorMsg(res, 500, `lo sentimos hemos cometido un error!`, error);
    }
}

//=======================================
//Eliminar tipo de vulnerabilidad por id
//=======================================
async function deleteVulnerabilityTypeById(req, res) {
    try {
        const id = req.params.id;
        const vulnerabilityType = await VulnerabilityType.findOne({ where: { id } });
        if (!vulnerabilityType)
            return exceptionMsg(res, id, 'Tipo de Vulnerabilidad');
        if (vulnerabilityType.isDefault === 1)
            return res.status(409).json({
                ok: false,
                err: {
                    message: `Tipo de vulnerabilidad no puede eliminarse por defecto`
                }
            });

        const deleteVulnerabilityType = await VulnerabilityType.destroy({ where: { id } });
        saveLog(req, "delete", "VulnerabilityType", id, req.user.id);

        successMsg(res, 200, 'Registro eliminado con éxito', deleteVulnerabilityType);
    } catch (error) {
        errorMsg(res, 500, 'Ha ocurrido un error', error);
    }
}

module.exports = {
    getVulnerabilityTypes,
    getVulnerabilityTypesByStatus,
    getVulnerabilityTypeById,
    saveVulnerabilityType,
    updateVulnerabilityTypeById,
    deleteVulnerabilityTypeById,
    updateVulnerabilityTypeStatusById,
}